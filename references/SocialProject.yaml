openapi: 3.1.0
x-stoplight:
  id: 09q2q3d40kitn
info:
  title: getUser
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{_userId}':
    parameters:
      - schema:
          type: string
        name: _userId
        in: path
        required: true
        description: get me infor
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '201':
          description: Created
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      parameters:
        - schema:
            type: string
          in: header
        - schema:
            type: string
          in: query
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /users:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: Created
        '400':
          description: Missing Required Information
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                age:
                  type: integer
                '':
                  type: string
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
      security:
        - Authorization: []
    parameters: []
  /posts:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/res'
      operationId: get
    post:
      summary: ''
      operationId: post-posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                type: object
                properties: {}
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                type: object
                properties: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                '':
                  type: string
        description: ''
components:
  schemas:
    User:
      title: User
      type: object
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      x-internal: false
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
        '':
          type: string
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    Friend:
      title: Friend
      x-stoplight:
        id: 1wmvsdc396956
      type: object
      properties:
        id:
          type: string
    Post:
      title: Post
      x-stoplight:
        id: cde8zj4pak283
      type: object
      properties:
        id:
          type: string
    Comment:
      title: Comment
      x-stoplight:
        id: mhd9a0ce6krv2
      type: object
      properties:
        id:
          type: string
    Reaction:
      title: Reaction
      x-stoplight:
        id: hyveqx8dl7zji
      type: object
      properties:
        id:
          type: string
  requestBodies:
    body:
      content:
        application/json:
          schema:
            type: object
            properties:
              userId:
                type: string
  responses:
    res:
      description: Example response
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
        application/xml:
          schema:
            type: object
            properties:
              name:
                type: string
              age:
                type: string
              '':
                type: string
        multipart/form-data:
          schema:
            type: object
            properties:
              name:
                type: string
              gender:
                type: string
              age:
                type: number
              '':
                type: string
  parameters:
    param:
      name: userId
      in: query
      required: false
      schema:
        type: string
      description: choose user
  examples:
    rse:
      value:
        description: test
        type: object
        properties:
          id:
            type: string
        required:
          - userId: string
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
